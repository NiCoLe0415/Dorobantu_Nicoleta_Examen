function isValid(Model, record) {
    return Object.entries(Model.tableAttributes).reduce((valid, [name, field]) => {
        if (valid && !field.primaryKey && !field.allowNull && !field._autoGenerated && !record[name]) {
            console.log('invalid field', field)
            valid = false;
        }
        return valid;
    }, true);
}


async function handleInsertRecord(Model, request) {
    if (isValid(Model, request.body)) {
        console.log('we are valid', request.body);
        return await Model.create(request.body);
    }
    throw new Error('invalid');
}

async function handleUpdateRecord(Model, id, body) {
    if (isValid(Model, body)) {
        console.log('we are valid', body);
        const record = await handleSelectRecordsById(Model, id);
        if (record == null) {
            return null;
        }
        await record.update(body);

        return await record.save(body);
    }
    throw new Error('invalid');
}

async function handleSelectRecords(Model, response) {
    let records = await Model.findAll();
    console.log('records ');
    console.log(records);
    responseForMultipleRecords(Model, records, response);
}

async function handleSelectRecordsSorted(Model, field, direction, response) {
    let records = await Model.findAll({ order: [[field, direction]] });
    console.log('records ');
    console.log(records);
    responseForMultipleRecords(Model, records, response);
}

async function handleSelectRecordsPaginated(Model, page, pageSize, response) {
    let records = await Model.findAndCountAll({ offset: page - 1, limit: Number(pageSize) });
    console.log('records ');
    console.log(records);
    if (records.count > 0) {
        return response.json(records);
    }
    else {
        return response.status(404).json({
            message: "Couldn't retrieve " + Model.name
        });
    }
}


async function handleSelectRecordsFiltered(Model, fields, response) {
    let records = await Model.findAll({ where: fields});
    console.log('records ');
    console.log(records);
    responseForMultipleRecords(Model, records, response);
}

async function handleSelectRecordsById(Model, id) {
    return record = await Model.findOne({ where: { id } });
}

async function handleSelectRecordsWithQuery(Model, query, response) {
    const records = await Model.findAll({ where: query });
    console.log(records);
    responseForMultipleRecords(Model, records, response);
}

async function handleDelete(Model, id, response) {
    const record = await handleSelectRecordsById(Model, id);
    if (record) {
        record.destroy();
        response.json(record);
    } else {
        response.status(404).json({
            message: "Couldn't delete " + Model.name
        });
    }

}

module.exports = {
    handleInsertRecord,
    handleSelectRecords,
    handleSelectRecordsById,
    handleUpdateRecord,
    handleSelectRecordsWithQuery,
    handleDelete,
    handleSelectRecordsPaginated,
    handleSelectRecordsSorted,
    handleSelectRecordsFiltered
};

function responseForMultipleRecords(Model, records, response) {
    if (records.length > 0) {
        response.json(records);
    } else {
        response.status(404).json({
            message: "Couldn't retrieve " + Model.name
        });
    }
}